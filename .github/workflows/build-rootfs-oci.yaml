# Copyright 2022 Antoine Martin
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Build and Push Custom Root FS as OCI Image"

on:
  workflow_dispatch:
    inputs:
      flavor:
        description: 'Root FS flavor'
        required: true
        default: 'arch'
        type: choice
        options:
          - ubuntu
          - arch
          - alpine
          - debian
          - opensuse
      version:
        description: 'Version tag for the image. For other than Arch and Alpine, it should be latest'
        required: true
        default: '2025.08.01'
        type: string
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/miniwsl
  FLAVOR: alpine
  VERSION: "3.22.1"

jobs:
  set-variables:
    runs-on: ubuntu-latest
    outputs:
      flavor: ${{ steps.set-vars.outputs.flavor }}
      version: ${{ steps.set-vars.outputs.version }}
    steps:
      - name: Set variables from inputs or defaults
        id: set-vars
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Using inputs from workflow dispatch"
            echo "flavor=${{ inputs.flavor }}" >> $GITHUB_OUTPUT
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "Using default values for pull request trigger"
            echo "flavor=${{ env.FLAVOR }}" >> $GITHUB_OUTPUT
            echo "version=${{ env.VERSION }}" >> $GITHUB_OUTPUT
          fi
          echo "Final values:"
          echo "Flavor: $(cat $GITHUB_OUTPUT | grep flavor= | cut -d= -f2)"
          echo "Version: $(cat $GITHUB_OUTPUT | grep version= | cut -d= -f2)"

  build-archlinux-base:
    runs-on: ubuntu-latest
    needs: [set-variables]
    if: ${{ needs.set-variables.outputs.flavor == 'arch' }}
    outputs:
      artifact-name: archlinuxbase-rootfs
    steps:
      - name: Set environment variables
        run: |
          echo "FLAVOR=${{ needs.set-variables.outputs.flavor }}" >> $GITHUB_ENV
          echo "VERSION=${{ needs.set-variables.outputs.version }}" >> $GITHUB_ENV
      
      - name: Remove the root.x86_64 prefix from the Root FS
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y libarchive-tools
          curl -sLo origfs.tar.zst "https://archive.archlinux.org/iso/${VERSION}/archlinux-bootstrap-${VERSION}-x86_64.tar.zst"
          sudo bsdtar -xpkf origfs.tar.zst
          sudo bsdtar -zcpf archlinux.rootfs.tar.gz -C root.x86_64 `ls root.x86_64`
      - name: Upload root fs artifact
        uses: actions/upload-artifact@v4
        with:
          name: archlinuxbase-rootfs
          path: "${{ github.workspace }}/archlinux.rootfs.tar.gz"

  build-and-push-rootfs:
    runs-on: ubuntu-latest
    needs: [set-variables, build-archlinux-base]
    if: always() && (needs.build-archlinux-base.result == 'success' || needs.build-archlinux-base.result == 'skipped')
    permissions:
      contents: read
      packages: write
    steps:
      - name: Set environment variables
        run: |
          echo "FLAVOR=${{ needs.set-variables.outputs.flavor }}" >> $GITHUB_ENV
          echo "VERSION=${{ needs.set-variables.outputs.version }}" >> $GITHUB_ENV
      
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y libarchive-tools

      - name: Set base URL for flavor
        id: set-base-url
        run: |
          UPPER_VERSION="${VERSION}"
          # check that the version is latest if not Arch or Alpine
          if [[ "${FLAVOR}" != "arch" && "${FLAVOR}" != "alpine" ]]; then
            if [[ "$VERSION" != "latest" ]]; then
              echo "Error: For ${FLAVOR}, version must be 'latest'. Got: $VERSION"
              exit 1
            fi
          fi
          # On alpine, the version should contain the revision but we need the version with only the minor release for the URL.
          # Verify the version format and fail if not the right one
          if [[ "${FLAVOR}" == "alpine" ]]; then
            if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+ ]]; then
              echo "Error: For alpine, version must be in the format 'X.Y.Z'. Got: $VERSION"
              exit 1
            fi
            # Now remove the revision on UPPER_VERSION
            UPPER_VERSION="${UPPER_VERSION%.*}"
          fi
          # On Arch, the version format should be YYYY.MM.DD. Check it.
          if [[ "${FLAVOR}" == "arch" ]]; then
            if [[ ! "$VERSION" =~ ^[0-9]{4}\.[0-9]{2}\.[0-9]{2}$ ]]; then
              echo "Error: For arch, version must be in the format 'YYYY.MM.DD'. Got: $VERSION"
              exit 1
            fi
          fi
          case "${FLAVOR}" in
            ubuntu)
              echo "base_url=https://cloud-images.ubuntu.com/wsl/noble/current/ubuntu-noble-wsl-amd64-wsl.rootfs.tar.gz" >> $GITHUB_OUTPUT
              ;;
            arch)
              echo "base_url=file://${GITHUB_WORKSPACE}/archlinux.rootfs.tar.gz" >> $GITHUB_OUTPUT
              ;;
            alpine)
              echo "base_url=https://dl-cdn.alpinelinux.org/alpine/v${UPPER_VERSION}/releases/x86_64/alpine-minirootfs-${VERSION}-x86_64.tar.gz" >> $GITHUB_OUTPUT
              ;;
            debian)
              echo "base_url=https://doi-janky.infosiftr.net/job/tianon/job/debuerreotype/job/amd64/lastSuccessfulBuild/artifact/stable/rootfs.tar.xz" >> $GITHUB_OUTPUT
              ;;
            opensuse)
              echo "base_url=https://download.opensuse.org/tumbleweed/appliances/opensuse-tumbleweed-dnf-image.x86_64-lxc-dnf.tar.xz" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "Unsupported flavor: ${FLAVOR}"
              exit 1
              ;;
          esac

      - name: Download Arch Linux base (if needed)
        if: ${{ needs.set-variables.outputs.flavor == 'arch' }}
        uses: actions/download-artifact@v4
        with:
          name: archlinuxbase-rootfs
          path: ${{ github.workspace }}

      - name: Build custom rootfs
        run: |
          # Download base rootfs
          if [[ "${{ steps.set-base-url.outputs.base_url }}" == file://* ]]; then
            # For arch, the file is already downloaded
            cp archlinux.rootfs.tar.gz base.tar.gz
          else
            curl -L "${{ steps.set-base-url.outputs.base_url }}" -o base.tar.gz
          fi
          
          # Extract base rootfs
          mkdir -p build
          sudo bsdtar -zxpkf base.tar.gz -C build
          
          # Configure the environment
          sudo cp -f /etc/resolv.conf build/etc/resolv.conf
          sudo mount -o bind /dev build/dev
          sudo mount -o bind /proc build/proc
          sudo mount -o bind /sys build/sys
          
          # Install configuration scripts
          sudo /usr/bin/install -m 740 -o root -g root ./p10k.zsh build/p10k.zsh
          sudo /usr/bin/install -m 740 -o root -g root ./configure.sh build/configure.sh
          
          # Run configuration
          sudo chroot --userspec=root:root build ./configure.sh
          
          # Cleanup
          sudo rm -f build/p10k.zsh build/configure.sh
          sudo umount -l build/{sys,proc,dev}
          
          # Create final rootfs tarball
          sudo bsdtar -zcpf miniwsl.${FLAVOR}.${VERSION}.rootfs.tar.gz -C build `ls build`

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ env.FLAVOR }}
          tags: |
            type=raw,value=${{ env.VERSION }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create Dockerfile for OCI image
        run: |
          cat << EOF > Dockerfile
          FROM scratch
          ADD miniwsl.${FLAVOR}.${VERSION}.rootfs.tar.gz /
          LABEL org.opencontainers.image.source="https://github.com/${{ github.repository }}"
          LABEL org.opencontainers.image.description="WSL Custom Root FS - ${{ env.FLAVOR}}"
          LABEL org.opencontainers.image.flavor="${{ env.FLAVOR }}"
          LABEL org.opencontainers.image.version="${{ env.VERSION }}"
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64

      - name: Generate image digest
        id: digest
        run: |
          echo "Image pushed successfully!"
          echo "Registry: ${{ env.REGISTRY }}"
          echo "Image: ${{ env.IMAGE_NAME }}-${{ env.FLAVOR }}"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo "Flavor: ${FLAVOR}"
          echo "Version: ${VERSION}"
